@namespace Uno.Client.Shared
@using Uno.Shared

@if (Player == null)
{
    <h1>Player not set</h1>
    return;
}

<div class="container auto-font-size @ActiveClass @SelectableClass" @onclick="OnClickContainer">
    <div class="icon">
        @Icon
    </div>
    <div class="name">
        @Player?.PlayerName
    </div>
    @if (Player?.FinishedNumber == 0)
    {
         <div class="cards">
            @for (int i = 0; i < CardCount; i++)
            {
                <div class="card-wrapper">
                    <UnoCard IsBackFace="true"/>
                </div>
            }
        </div>
    }
    else
    {
        <h3>Finished: @Player?.FinishedNumber</h3>
    }
</div>

@code {
    private MarkupString Icon => new MarkupString(Emoji.GetPlayerEmoji(Player?.PlayerName ?? string.Empty));

    private int CardCount => Player?.CardCount ?? 0;

    [Parameter]
    public GameMessages.PlayerHand? Player { get; set; }

    [Parameter]
    public string? ActivePlayerName { get; set; }

    [Parameter]
    public bool CanBePicked { get; set; }

    [Parameter]
    public EventCallback<string> OnPickPlayer { get; set; }

    private string SelectableClass => CanBePicked ? "selectable glow red" : string.Empty;

    private string ActiveClass => (Player?.PlayerName == ActivePlayerName) ? "active glow blue" : string.Empty;

    public Task OnClickContainer()
    {
        return OnPickPlayer.InvokeAsync(this.Player?.PlayerName ?? string.Empty);
    }
}

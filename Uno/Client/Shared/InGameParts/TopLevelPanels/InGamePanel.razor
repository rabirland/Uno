@namespace Uno.Client.Shared
@using Uno.Client.Pages
@using Uno.Shared

@if (this.Status == null)
{
    <h1>Status not given</h1>
    return;
}

<div class="table">
    <div class="center">
        <PullDeckBox CanPullCard="CanPlayCard" DeckRemainingCards="this.Status?.DeckRemainingCards ?? 0" OnPull="() => OnPullCard.InvokeAsync()" />

        <RingBackground Color="this.Status?.ActiveColor ?? GameMessages.CardColor.Colorless">
            <PlayedCardsDeckBox PlayedCards="this.Status?.PlayedCards" />
        </RingBackground>
    </div>

    @if (ShowColorPicker)
    {
        <div class="center">
            <ColorPicker Show="ShowColorPicker" CanPick="CanPickColor" OnPickColor="c => OnPickColor.InvokeAsync(c)" />
        </div>
    }
    

    <div class="bottom">
            <LocalPlayerBox CanPlayCard="this.CanPlayCard"
                            Cards="this.Status?.Cards"
                            CanBePicked="CanPickPlayer"
                            OnPlayCard="p => this.OnPlayCard.InvokeAsync(p)"
                            OnPickedPlayer="OnPickPlayerBox"
                            PlayerName="@PlayerName" />
    </div>
</div>
@* 
<div class="layout-v">
    <div class="row min">
        @if (remotePlayers.Length >= 1)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[0]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
            </div>
        }
        
        @if (remotePlayers.Length >= 2)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[1]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
            </div>
        }

        @if (remotePlayers.Length >= 3)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[2]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
            </div>
        }

        @if (remotePlayers.Length >= 4)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[3]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
            </div>
        }
    </div>

    @for (int i = 7; i < remotePlayers.Length; i += 4)
    {
        <div class="row players min">
            @if (remotePlayers.Length >= (i + 1))
            {
                <div class="cell">
                    <RemotePlayerBox Player="remotePlayers[i]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
                </div>
            }

            @if (remotePlayers.Length >= (i + 2))
            {
                <div class="cell">
                    <RemotePlayerBox Player="remotePlayers[i + 1]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
                </div>
            }

            @if (remotePlayers.Length >= (i + 3))
            {
                <div class="cell">
                    <RemotePlayerBox Player="remotePlayers[i + 2]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
                </div>
            }

            @if (remotePlayers.Length >= (i + 4))
            {
                <div class="cell">
                    <RemotePlayerBox Player="remotePlayers[i + 3]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
                </div>
            }
        </div>
    }

    <div class="row max">
        <div class="color-picker">
            
        </div>

        @if (remotePlayers.Length >= 5)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[4]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
            </div>
        }

        <div class="active-color">
            
        </div>

        @if (remotePlayers.Length >= 6)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[5]" ActivePlayerName="@Status?.CurrentPlayerName" CanBePicked="CanPickPlayer" OnPickPlayer="OnPickPlayerBox"/>
            </div>
        }
    </div>

    <div class="row @LocalPlayerRowClass min">
        @if (this.Status?.CurrentPlayerFinishedNumber == 0)
        {
           
        }
        else
        {
            <h1>Position: @this.Status?.CurrentPlayerFinishedNumber</h1>
        }
    </div>
</div> *@

@code {
    private GameMessages.PlayerHand[] remotePlayers = Array.Empty<GameMessages.PlayerHand>();

    [Parameter]
    public ListenGameResponse.GameStatus? Status { get; set; }

    [Parameter]
    public EventCallback<UnoInGame.PlayCardParams> OnPlayCard { get; set; }

    [Parameter]
    public EventCallback OnPullCard { get; set; }

    [Parameter]
    public EventCallback<string> OnPickPlayer { get; set; }

    [Parameter]
    public EventCallback<GameMessages.CardColor> OnPickColor { get; set; }

    [Parameter]
    public string? PlayerName { get; set; }

    private bool IsLocalPlayerActive => Status?.CurrentPlayerName == PlayerName;

    private bool CanPlayCard => IsLocalPlayerActive && Status?.RoundPhase == GameMessages.RoundPhase.Card;

    private bool CanPickPlayer => IsLocalPlayerActive && Status?.RoundPhase == GameMessages.RoundPhase.Player;

    private bool ShowColorPicker => Status?.RoundPhase == GameMessages.RoundPhase.Color && Status.CurrentPlayerName == PlayerName;

    private bool CanPickColor => ShowColorPicker && IsLocalPlayerActive;

    private string LocalPlayerRowClass => this.CanPlayCard ? "glow blue" : string.Empty;

    protected override void OnParametersSet()
    {
        if (this.Status != null)
        {
            this.remotePlayers = this.Status.OtherPlayerCards.ToArray();   
        }
        else
        {
            this.remotePlayers = Array.Empty<GameMessages.PlayerHand>();
        }
    }

    private Task OnPickPlayerBox(string playerName)
    {
        if (this.CanPickPlayer)
        {
            return this.OnPickPlayer.InvokeAsync(playerName);   
        }
        else
        {
            return Task.CompletedTask;
        }
    }
}

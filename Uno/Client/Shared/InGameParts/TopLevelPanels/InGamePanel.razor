@namespace Uno.Client.Shared
@using Uno.Client.Pages
@using Uno.Shared

@if (this.Status == null)
{
    <h1>Status not given</h1>
    return;
}

<div class="wrapper">
    <BlazorSciFi.RingLayout CenterRadiusPercentage="20" Offset="160" Arc="220" CenterItems="true">
        @for (int i = 0; i < remotePlayers.Length; i++)
        {
            var opponent = remotePlayers[i];
            <BlazorSciFi.RingItem>
                <PlayerBox Name="@opponent.PlayerName"
                           BlankCardCount="opponent.CardCount"
                           IsActive="Status?.CurrentPlayerName == opponent.PlayerName"
                           Selectable="CanPickPlayer"
                           OnClick="() => OnPickPlayerBox(opponent.PlayerName)"
                           CardSize="@cardSize"
                           Style="width: 30vmin"
                           NameStyle="font-size: 2vmin;"/>
            </BlazorSciFi.RingItem>
        }
    </BlazorSciFi.RingLayout>

    <div class="center">
        <PullDeckBox CanPullCard="CanPlayCard" DeckRemainingCards="this.Status?.DeckRemainingCardCount ?? 0" OnPull="() => OnPullCard.InvokeAsync()" CardSize="@cardSizeLarge" />

        <PlayedCardsDeckBox PlayedCards="this.Status?.PlayedCards" CardSize="@cardSizeLarge" />
    </div>

    @if (Status?.DrawStackCount > 1)
    {
        <div class="center draw-counter">
            +@Status.DrawStackCount
        </div>
    }

    <div class="bottom">
        <PlayerBox Cards="this.Status?.Cards"
                   Selectable="CanPickPlayer"
                   OnPlayCard="p => this.OnPlayCard.InvokeAsync(p)"
                   IsActive="CanPlayCard"
                   CardSize="@cardSizeLarge" />
    </div>

    @if (ShowColorPicker)
    {
        <div class="center">
            <ColorPicker Show="ShowColorPicker" CanPick="CanPickColor" OnPickColor="c => OnPickColor.InvokeAsync(c)" />
        </div>
    }
</div>

@code {
    private GameMessages.PlayerHand[] remotePlayers = Array.Empty<GameMessages.PlayerHand>();
    private const string cardSize = "15vmin";
    private const string cardSizeLarge = "20vmin";

    [Parameter]
    public ListenGameResponse.GameStatus? Status { get; set; }

    [Parameter]
    public EventCallback<UnoInGame.PlayCardParams> OnPlayCard { get; set; }

    [Parameter]
    public EventCallback OnPullCard { get; set; }

    [Parameter]
    public EventCallback<string> OnPickPlayer { get; set; }

    [Parameter]
    public EventCallback<GameMessages.CardColor> OnPickColor { get; set; }

    [Parameter]
    public string? PlayerName { get; set; }

    private bool IsLocalPlayerActive => Status?.CurrentPlayerName == PlayerName;

    private bool CanPlayCard => IsLocalPlayerActive && Status?.RoundPhase == GameMessages.RoundPhase.Card;

    private bool CanPickPlayer => IsLocalPlayerActive && Status?.RoundPhase == GameMessages.RoundPhase.Player;

    private bool ShowColorPicker => Status?.RoundPhase == GameMessages.RoundPhase.Color && Status.CurrentPlayerName == PlayerName;

    private bool CanPickColor => ShowColorPicker && IsLocalPlayerActive;

    protected override void OnParametersSet()
    {
        if (this.Status != null)
        {
            this.remotePlayers = this.Status.OtherPlayerCards.ToArray();   
        }
        else
        {
            this.remotePlayers = Array.Empty<GameMessages.PlayerHand>();
        }
    }

    private Task OnPickPlayerBox(string playerName)
    {
        if (this.CanPickPlayer)
        {
            return this.OnPickPlayer.InvokeAsync(playerName);   
        }
        else
        {
            return Task.CompletedTask;
        }
    }
}

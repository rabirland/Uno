@namespace Uno.Client.Shared
@using Uno.Shared

@if (this.Status == null)
{
    <h1>Status not given</h1>
    return;
}

<div class="grid">
    <div class="row">
        @if (remotePlayers.Length >= 1)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[0]" />
            </div>
        }
        
        @if (remotePlayers.Length >= 2)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[1]" />
            </div>
        }

        @if (remotePlayers.Length >= 3)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[2]" />
            </div>
        }

        @if (remotePlayers.Length >= 4)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[3]" />
            </div>
        }
    </div>

    @for (int i = 7; i < remotePlayers.Length; i += 4)
    {
        @if (remotePlayers.Length >= (i + 1))
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[i]" />
            </div>
        }

        @if (remotePlayers.Length >= (i + 2))
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[i + 1]" />
            </div>
        }

        @if (remotePlayers.Length >= (i + 3))
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[i + 2]" />
            </div>
        }

         @if (remotePlayers.Length >= (i + 4))
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[i + 3]" />
            </div>
        }
    }

    <div class="row">
        @if (remotePlayers.Length >= 5)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[4]" />
            </div>
        }

        <div class="cell double">
            DECK
        </div>

        @if (remotePlayers.Length >= 6)
        {
            <div class="cell">
                <RemotePlayerBox Player="remotePlayers[5]" />
            </div>
        }
    </div>
    <div class="row fill">
            <LocalPlayerBox Cards="this.Status.Cards"/>
    </div>
</div>

@code {
    private ListenGameResponse.PlayerHand[] remotePlayers = Array.Empty<ListenGameResponse.PlayerHand>();

    [Parameter]
    public ListenGameResponse.GameStatus? Status { get; set; }

    protected override void OnParametersSet()
    {
        if (this.Status != null)
        {
            this.remotePlayers = this.Status.OtherPlayerCards.ToArray();   
        }
        else
        {
            this.remotePlayers = Array.Empty<ListenGameResponse.PlayerHand>();
        }
    }
}

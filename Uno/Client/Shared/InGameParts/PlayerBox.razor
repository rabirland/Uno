@namespace Uno.Client.Shared
@using Uno.Client.Pages
@using Uno.Shared

<div class="player-box card @ActiveClass @SelectableClass" @onclick="OnClick" style="@Style">
    @if (string.IsNullOrEmpty(Name) == false)
    {
        <div class="name" style="@NameStyle">
            @Name (@BlankCardCount)
        </div>
    }
    
    <div class="cards" style="font-size: @CardSize;">
        @* Cards with backface *@
        @for (int i = 0; i < BlankCardCount; i++)
        {
            <div class="card-wrapper">
                <UnoCard IsBackFace="true" />
            </div>
        }

        @* Cards with face *@
        @if (this.Cards != null)
        {
            @foreach (var card in this.Cards)
            {
                <div class="card-wrapper card-stack">
                    @for (int i = card.Count - 1; i >= 0; i--)
                    {
                        int index = i;

                        <div class="stack-entry @GetHoverClass(index)" @onmouseover="() => OnHover(index)" @onmouseout="OnLeave" @onclick="() => OnClickCard(card.Color, card.Type, index)">
                            <UnoCard Color="card.Color" Type="card.Type" />
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    private int hoverIndex = -1;

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public bool IsActive { get; set; }

    [Parameter]
    public bool Selectable { get; set; }

    [Parameter]
    public int BlankCardCount { get; set; }

    [Parameter]
    public string CardSize { get; set; } = "10vmin";

    [Parameter]
    public string? NameStyle { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public IEnumerable<GameMessages.CardCount>? Cards { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public EventCallback<UnoInGame.PlayCardParams> OnPlayCard { get; set; }

    private string ActiveClass => IsActive ? "active" : string.Empty;

    private string SelectableClass => Selectable ? "selectable" : string.Empty;

    private Task OnClickCard(GameMessages.CardColor color, GameMessages.CardType type, int index)
    {
        return OnPlayCard.InvokeAsync(new UnoInGame.PlayCardParams(new GameMessages.CardFace(color, type), index + 1));
    }

    private string GetHoverClass(int index)
    {
        if (this.hoverIndex >= 0 && index <= this.hoverIndex)
        {
            return "hover";
        }
        else
        {
            return string.Empty;
        }
    }

    private void OnHover(int index)
    {
        this.hoverIndex = index;
    }

    private void OnLeave()
    {
        this.hoverIndex = -1;
    }
}

@page "/game/{id}"

@using Uno.Shared

@inject Api api

<JoinGameDialog @bind-Show="showJoinDialog" GameId="@this.Id" OnJoined="OnJoined"/>

@if (lastStatus.Lobby != null)
{
	<GameWaitingForStart Lobby="lastStatus.Lobby" AdminName="@lastStatus.AdminPlayerName" PlayerName="@playerName" OnStart="OnStartGame" />
}
else if (lastStatus.Game != null)
{
	<InGamePanel PlayerName="@playerName" Status="lastStatus.Game" OnDropCard="OnDropCard"/>
}

@code {
	private ListenGameResponse lastStatus = ListenGameResponse.Empty;
	private string playerName = string.Empty;
	private bool showJoinDialog = false;

	[Parameter]
	public string Id { get; set; } = string.Empty;

	protected override async void OnInitialized()
	{
		await base.OnInitializedAsync();

		var rejoinResult = await api.Game.RejoinGameAsync(new RejoinGameRequest(this.Id));

		if (rejoinResult.IsSuccess)
		{
			OnJoined(rejoinResult.PlayerName);
		}
		else
		{
			this.showJoinDialog = true;
			this.StateHasChanged();
		}
	}

	/// <summary>
	/// When the player is joined to the game (according to the server)
	/// </summary>
	private void OnJoined(string playerName)
	{
		this.playerName = playerName;

		Listen()
			.CatchExceptions();
	}

	/// <summary>
	/// Listens for the game status updates.
	/// </summary>
	private async Task Listen()
	{
		await foreach (var status in api.Game.ListenGameAsync(new ListenGameRequest(this.Id)))
		{
			this.lastStatus = status;
			this.StateHasChanged();
		}
	}

	/// <summary>
	/// When the user requests to start the game.
	/// </summary>
	private async void OnStartGame()
	{
		await api.Game.StartGameAsync(new StartGameRequest(this.Id));
	}

	private async void OnDropCard(DropCardParams eventParams)
	{
		await api.Game.DropCardAsync(new DropCardRequest(this.Id, eventParams.Card, eventParams.Count));
	}

	public record DropCardParams(GameMessages.CardFace Card, int Count);
}

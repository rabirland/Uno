@page "/game/{id}"

@using Uno.Shared

@inject Api api

<JoinGameDialog @bind-Show="showJoinDialog" GameId="@this.Id" OnJoined="OnJoined"/>

@if (lastStatus.Lobby != null)
{
	<GameWaitingForStart Lobby="lastStatus.Lobby" AdminName="@lastStatus.AdminPlayerName" PlayerName="@playerName" OnStart="OnStartGame" />
}
else if (lastStatus.Game != null)
{
    @if (lastStatus.Game.IsGameFinished)
    {
        <GameFinishedPanel />
    }
    else
    {
        <InGamePanel PlayerName="@playerName" Status="lastStatus.Game" OnPlayCard="OnPlayCard" OnPullCard="OnPullCard" OnPickPlayer="OnPickPlayer" OnPickColor="OnPickColor"/>   
    }
}

@code {
    private ListenGameResponse lastStatus = ListenGameResponse.Empty;
    private string playerName = string.Empty;
    private bool showJoinDialog = false;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private bool IsActualPlayer => this.lastStatus.Game?.CurrentPlayerName == this.playerName;
    private bool PickPlayerPhase => this.lastStatus.Game?.RoundPhase == GameMessages.RoundPhase.Player;
    private bool PickColorPhase => this.lastStatus.Game?.RoundPhase == GameMessages.RoundPhase.Color;
    private bool PickCardPhase => this.lastStatus.Game?.RoundPhase == GameMessages.RoundPhase.Card;

    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();

        var rejoinResult = await api.Game.RejoinGameAsync(new RejoinGameRequest(this.Id));

        if (rejoinResult.IsSuccess)
        {
            OnJoined(rejoinResult.PlayerName);
        }
        else
        {
            this.showJoinDialog = true;
            this.StateHasChanged();
        }
    }

    /// <summary>
    /// When the player is joined to the game (according to the server)
    /// </summary>
    private void OnJoined(string playerName)
    {
        this.playerName = playerName;

        Listen()
            .CatchExceptions();
    }

    /// <summary>
    /// Listens for the game status updates.
    /// </summary>
    private async Task Listen()
    {
        await foreach (var status in api.Game.ListenGameAsync(new ListenGameRequest(this.Id)))
        {
            this.lastStatus = status;
            this.StateHasChanged();
        }
    }

    /// <summary>
    /// When the user requests to start the game.
    /// </summary>
    private async void OnStartGame()
    {
        if (this.lastStatus.Game == null)
        {
            await api.Game.StartGameAsync(new StartGameRequest(this.Id));   
        }
    }

    private async void OnPlayCard(PlayCardParams eventParams)
    {
        if (this.IsActualPlayer && this.PickCardPhase)
        {
            await api.Game.PlayCardAsync(new PlayCardRequest(this.Id, eventParams.Card, eventParams.Count));   
        }
    }

    private async void OnPullCard()
    {
        if (this.IsActualPlayer && this.PickCardPhase)
        {
            await api.Game.PullCardAsync(new PullCardRequest(this.Id));   
        }
    }

    private async void OnPickPlayer(string playerName)
    {
        if (this.IsActualPlayer && this.PickPlayerPhase)
        {
            await api.Game.PickPlayerAsync(new PickPlayerRequest(this.Id, playerName));   
        }
    }

    private async void OnPickColor(GameMessages.CardColor color)
    {
        if (this.IsActualPlayer && this.PickColorPhase)
        {
            await api.Game.PickColorAsync(new PickColorRequest(this.Id, color));   
        }
	}

	public record PlayCardParams(GameMessages.CardFace Card, int Count);
}

@page "/lobby"

@using Uno.Client
@using Uno.Client.GameService
@using Uno.Shared

@inject Api api
@inject IGameService gameService
@inject NavigationManager navigationManager

<h4>@lastUpdate.LobbyName</h4>

@foreach (var player in lastUpdate.Players)
{
    <div class="btn disabled @GetListButtonClass(player)">@player.Name</div>
}

<div>
    <button class="btn @readyButtonColorClass @readyButtonStatusClass" @onclick="OnClickReady">Ready</button>
</div>


@code {
    private bool waitingForReadyResponse = true;
    private bool isReady = false;
    ListenLobbyResponse lastUpdate = ListenLobbyResponse.Empty;

    private string readyButtonColorClass => this.isReady
        ? "safe"
        : "unsafe";

    private string readyButtonStatusClass => this.waitingForReadyResponse
        ? "disabled"
        : string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ListenLobby()
            .CatchExceptions();
    }

    private async Task ListenLobby()
    {
        await foreach (var lobbyStatus in api.Lobby.ListenLobbyAsync(new ListenLobbyRequest()))
        {
            this.lastUpdate = lobbyStatus;
            this.isReady = lobbyStatus
                .Players
                .First(p => p.Name == this.gameService.PlayerName)
                .IsReady;
            this.waitingForReadyResponse = false;

            if (lobbyStatus.GameReady)
            {
                this.navigationManager.NavigateTo("/game");
            }
            else
            {
                this.StateHasChanged();
            }
        }
    }

    private async Task OnClickReady()
    {
        this.waitingForReadyResponse = true;
        await api.Lobby.SetReadyAsync(new SetReadyRequest(!isReady));
    }

    private string GetListButtonClass(ListenLobbyPlayerEntry player)
    {
        return player.IsReady
            ? "safe"
            : "unsafe";
    }
}
